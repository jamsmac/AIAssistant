"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è AI Development System
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏
"""
import sys
from pathlib import Path
from fastapi import FastAPI, HTTPException, Header, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field, EmailStr
from typing import Literal, Optional, List, Dict, Any
from datetime import datetime
import uvicorn
from fastapi.responses import StreamingResponse
import asyncio
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ agents
sys.path.append(str(Path(__file__).parent.parent / "agents"))

from ai_router import AIRouter
from database import get_db
from ranking_collector import RankingCollector
from auth import hash_password, verify_password, create_jwt_token, verify_jwt_token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AI Development System API",
    description="REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    version="1.0.0"
)

# CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:3001", 
        "http://localhost:3002",
        "http://localhost:5173"  # Vite dev server
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Router
router = AIRouter()

# ============================================
# Pydantic Models (—Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö)
# ============================================

class ChatRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏"""
    prompt: str = Field(..., description="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞", min_length=1)
    task_type: Literal['architecture', 'code', 'review', 'test', 'devops', 'research', 'chat', 'general'] = Field(
        default='chat',
        description="–¢–∏–ø –∑–∞–¥–∞—á–∏"
    )
    complexity: int = Field(default=5, ge=1, le=10, description="–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ (1-10)")
    budget: Literal['free', 'cheap', 'medium', 'expensive'] = Field(
        default='cheap',
        description="–ë—é–¥–∂–µ—Ç–Ω—ã–π –ª–∏–º–∏—Ç"
    )
    session_id: Optional[str] = None

class ChatResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –æ—Ç AI"""
    response: str
    model: str
    tokens: int
    cost: float
    error: bool = False

class ProjectRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    idea: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ –ø—Ä–æ–µ–∫—Ç–∞", min_length=10)
    budget: Literal['free', 'cheap', 'medium', 'premium'] = Field(
        default='medium',
        description="–ë—é–¥–∂–µ—Ç–Ω—ã–π –ª–∏–º–∏—Ç"
    )

class ProjectResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id: str
    architecture: dict
    code: dict
    review: dict
    total_cost: float
    status: str

class StatsResponse(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    calls: int
    tokens: int
    cost: float
    avg_cost_per_call: float
    by_model: dict
    available_models: dict

class HealthResponse(BaseModel):
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    status: str
    services: dict
    router_stats: dict

class HistoryResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    total: int
    items: list
    page: int
    limit: int

class HistoryStatsResponse(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
    general: dict
    by_model: list
    by_task: list
    by_date: list

# ============================================
# Authentication Models
# ============================================

class RegisterRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email: EmailStr
    password: str = Field(min_length=8, description="Password (min 8 characters)")

class LoginRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    email: EmailStr
    password: str

class UserInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    id: int
    email: str
    created_at: str
    last_login_at: Optional[str] = None

class AuthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    token: str
    user: UserInfo

# ============================================
# API Endpoints
# ============================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "status": "running",
        "message": "AI Development System API",
        "version": "1.0.0",
        "docs": "/docs"
    }

@app.post("/api/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ AI
    
    –ü—Ä–∏–º–µ—Ä—ã:
```json
    {
        "prompt": "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
        "task_type": "code",
        "complexity": 3,
        "budget": "free"
    }
```
    """
    try:
        result = router.route(
            prompt=request.prompt,
            task_type=request.task_type,
            complexity=request.complexity,
            budget=request.budget,
            session_id=request.session_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db = get_db()
        db.add_request(
            prompt=request.prompt,
            response=result['response'],
            model=result['model'],
            task_type=request.task_type,
            complexity=request.complexity,
            budget=request.budget,
            tokens=result.get('tokens', 0),
            cost=result.get('cost', 0.0),
            error=result.get('error', False)
        )
        
        return ChatResponse(**result)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/project", response_model=ProjectResponse)
async def create_project(request: ProjectRequest):
    """
    –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ –∏–¥–µ–∏
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
    1. –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (Claude/GPT-4)
    2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ (GPT-4/DeepSeek)
    3. –ö–æ–¥-—Ä–µ–≤—å—é (Gemini/DeepSeek)
    
    –ü—Ä–∏–º–µ—Ä—ã:
```json
    {
        "idea": "CRM —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏",
        "budget": "medium"
    }
```
    """
    try:
        # 1. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        print(f"üìê Creating architecture for: {request.idea}")
        architecture = router.route(
            prompt=f"""Create detailed software architecture for this project:

Project: {request.idea}

Include:
1. Tech stack recommendations
2. System architecture (frontend, backend, database)
3. API endpoints structure
4. Database schema
5. Key components and their responsibilities

Return in structured format.""",
            task_type='architecture',
            complexity=8,
            budget=request.budget
        )
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        print(f"üíª Generating code...")
        code = router.route(
            prompt=f"""Based on this architecture, generate production-ready starter code:

ARCHITECTURE:
{architecture['response']}

Generate:
1. Main application structure
2. Core API endpoints (at least 3)
3. Database models
4. Configuration files

Use TypeScript for frontend, Python/FastAPI for backend.""",
            task_type='code',
            complexity=7,
            budget=request.budget
        )
        
        # 3. –ö–æ–¥-—Ä–µ–≤—å—é
        print(f"üîç Running code review...")
        review = router.route(
            prompt=f"""Review this generated code:

CODE:
{code['response'][:2000]}...

Check for:
1. Security issues
2. Best practices
3. Performance concerns
4. Missing error handling

Provide brief summary with score (0-100).""",
            task_type='review',
            complexity=5,
            budget='cheap'
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        project_id = f"proj_{hash(request.idea) % 100000:05d}"
        total_cost = (
            architecture.get('cost', 0) + 
            code.get('cost', 0) + 
            review.get('cost', 0)
        )
        
        return ProjectResponse(
            project_id=project_id,
            architecture=architecture,
            code=code,
            review=review,
            total_cost=total_cost,
            status="completed"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stats", response_model=StatsResponse)
async def get_stats():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    - –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
    """
    try:
        stats = router.get_stats()
        return StatsResponse(**stats)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/health", response_model=HealthResponse)
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –º–æ–¥–µ–ª–µ–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    - –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        available = router._get_available_models()
        stats = router.get_stats()
        
        return HealthResponse(
            status="healthy",
            services={
                "anthropic": available['claude'],
                "openai": available['openai'],
                "openrouter": available['openrouter'],
                "gemini": available['gemini'],
                "ollama": available['ollama']
            },
            router_stats={
                "total_calls": stats['calls'],
                "total_cost": stats['cost']
            }
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/models")
async def list_models():
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
    """
    available = router._get_available_models()
    
    models_info = {
        "claude": {
            "name": "Claude Sonnet 4.5",
            "available": available['claude'],
            "use_cases": ["architecture", "research", "complex_code"],
            "cost": "$$$ (Premium)"
        },
        "openai": {
            "name": "GPT-4 Turbo",
            "available": available['openai'],
            "use_cases": ["code", "test", "general"],
            "cost": "$$ (Medium)"
        },
        "openrouter": {
            "name": "DeepSeek V3",
            "available": available['openrouter'],
            "use_cases": ["code", "devops", "review"],
            "cost": "$ (Cheap)"
        },
        "gemini": {
            "name": "Gemini 2.0 Flash",
            "available": available['gemini'],
            "use_cases": ["review", "quick_code", "validation"],
            "cost": "FREE"
        },
        "ollama": {
            "name": "Ollama (Local)",
            "available": available['ollama'],
            "use_cases": ["offline", "private", "unlimited"],
            "cost": "FREE (Local)"
        }
    }
    
    return models_info

@app.get("/api/history", response_model=HistoryResponse)
async def get_history(
    limit: int = 50,
    offset: int = 0,
    model: Optional[str] = None,
    task_type: Optional[str] = None,
    search: Optional[str] = None
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI
    
    Parameters:
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (max 100)
    - offset: —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    - model: —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏
    - task_type: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
    - search: –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    """
    try:
        db = get_db()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π limit
        limit = min(limit, 100)
        
        items = db.get_history(
            limit=limit,
            offset=offset,
            model=model,
            task_type=task_type,
            search=search
        )
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ - –±–µ—Ä–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total = len(items) + offset
        
        return HistoryResponse(
            total=total,
            items=items,
            page=offset // limit + 1 if limit > 0 else 1,
            limit=limit
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/history/stats", response_model=HistoryStatsResponse)
async def get_history_stats():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    """
    try:
        db = get_db()
        stats = db.get_stats()
        return HistoryStatsResponse(**stats)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/history/export")
async def export_history(
    format: str = "json",
    model: Optional[str] = None,
    task_type: Optional[str] = None
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
    
    Parameters:
    - format: json –∏–ª–∏ csv
    - model: —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏
    - task_type: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
    """
    try:
        import tempfile
        from fastapi.responses import FileResponse
        
        db = get_db()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        suffix = ".json" if format == "json" else ".csv"
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        if format == "json":
            count = db.export_to_json(
                temp_file.name,
                model=model,
                task_type=task_type
            )
        else:
            count = db.export_to_csv(
                temp_file.name,
                model=model,
                task_type=task_type
            )
        
        filename = f"history_{datetime.now().strftime('%Y%m%d_%H%M%S')}{suffix}"
        
        return FileResponse(
            temp_file.name,
            media_type="application/octet-stream",
            filename=filename
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============================================
# AI Models Ranking Endpoints
# ============================================

@app.get("/api/rankings")
async def get_rankings():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ AI –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    Returns:
        Dict —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¢–û–ü-3)
    """
    try:
        db = get_db()
        rankings = db.get_all_rankings()
        return rankings
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/rankings/{category}")
async def get_rankings_by_category(category: str, limit: int = 3):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Parameters:
    - category: reasoning, coding, vision, chat, agents, translation, local
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π (default: 3)
    """
    try:
        db = get_db()
        rankings = db.get_rankings_by_category(category, limit)
        return {"category": category, "models": rankings}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/rankings/update")
async def update_rankings():
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ (–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)
    
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    try:
        collector = RankingCollector()
        stats = collector.collect_all_rankings()
        
        total = sum(stats.values())
        
        return {
            "success": True,
            "total_updated": total,
            "by_category": stats,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/rankings/sources")
async def get_trusted_sources():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        db = get_db()
        sources = db.get_trusted_sources()
        return {"sources": sources, "count": len(sources)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============================================
# Streaming Chat Endpoint
# ============================================

async def stream_chat_response(prompt: str, task_type: str, complexity: int, budget: str, session_id: str = None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞
        result = router.route(
            prompt=prompt,
            task_type=task_type,
            complexity=complexity,
            budget=budget,
            session_id=session_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        metadata = {
            'type': 'metadata',
            'model': result['model'],
            'cost': result['cost'],
            'context_used': result.get('context_used', False),
            'context_length': result.get('context_length', 0)
        }
        yield f"data: {json.dumps(metadata)}\n\n"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º streaming - —Ä–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
        response_text = result['response']
        words = response_text.split()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ —á–∞—Å—Ç—è–º
        for i, word in enumerate(words):
            chunk = word + (' ' if i < len(words) - 1 else '')
            yield f"data: {json.dumps({'type': 'content', 'chunk': chunk})}\n\n"
            await asyncio.sleep(0.05)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        yield f"data: {json.dumps({'type': 'done', 'tokens': result['tokens']})}\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db = get_db()
        db.add_request(
            prompt=prompt,
            response=response_text,
            model=result['model'],
            task_type=task_type,
            complexity=complexity,
            budget=budget,
            tokens=result.get('tokens', 0),
            cost=result.get('cost', 0.0),
            error=result.get('error', False)
        )
        
    except Exception as e:
        yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"


@app.post("/api/chat/stream")
async def chat_stream(request: ChatRequest):
    """
    –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç —Å AI (Server-Sent Events)
    """
    return StreamingResponse(
        stream_chat_response(
            prompt=request.prompt,
            task_type=request.task_type,
            complexity=request.complexity,
            budget=request.budget,
            session_id=request.session_id
        ),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "X-Accel-Buffering": "no"
        }
    )

# ============================================
# Authentication Endpoints
# ============================================

@app.post("/api/auth/register", response_model=AuthResponse)
async def register(request: RegisterRequest):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Parameters:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - password: –ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)

    Returns:
    - token: JWT —Ç–æ–∫–µ–Ω
    - user: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        db = get_db()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing = db.get_user_by_email(request.email)
        if existing:
            raise HTTPException(status_code=400, detail="Email already registered")

        # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password_hash = hash_password(request.password)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = db.create_user(request.email, password_hash)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user_by_email(request.email)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = create_jwt_token(user_id, request.email)

        return AuthResponse(
            token=token,
            user=UserInfo(**user)
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/auth/login", response_model=AuthResponse)
async def login(request: LoginRequest):
    """
    –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É

    Parameters:
    - email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - password: –ü–∞—Ä–æ–ª—å

    Returns:
    - token: JWT —Ç–æ–∫–µ–Ω
    - user: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        db = get_db()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user_by_email(request.email)
        if not user:
            raise HTTPException(status_code=401, detail="Invalid credentials")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if not verify_password(request.password, user['password_hash']):
            raise HTTPException(status_code=401, detail="Invalid credentials")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        db.update_user_last_login(user['id'])

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = create_jwt_token(user['id'], user['email'])

        return AuthResponse(
            token=token,
            user=UserInfo(**user)
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/auth/me", response_model=UserInfo)
async def get_current_user(authorization: str = Header(None)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (protected endpoint)

    Headers:
    - Authorization: Bearer {token}

    Returns:
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        if not authorization or not authorization.startswith("Bearer "):
            raise HTTPException(status_code=401, detail="Missing or invalid token")

        token = authorization.replace("Bearer ", "")
        payload = verify_jwt_token(token)

        if not payload:
            raise HTTPException(status_code=401, detail="Invalid or expired token")

        db = get_db()
        user = db.get_user_by_email(payload['email'])

        if not user:
            raise HTTPException(status_code=401, detail="User not found")

        return UserInfo(**user)
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# ============================================
# JWT Middleware Helper
# ============================================

def get_current_user_from_token(authorization: str = Header(None)) -> Dict:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞

    Usage:
    ```python
    @app.get("/api/protected")
    async def protected_route(current_user: Dict = Depends(get_current_user_from_token)):
        return {"message": f"Hello {current_user['email']}!"}
    ```
    """
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Missing token")

    token = authorization.replace("Bearer ", "")
    payload = verify_jwt_token(token)

    if not payload:
        raise HTTPException(status_code=401, detail="Invalid token")

    db = get_db()
    user = db.get_user_by_email(payload['email'])

    if not user:
        raise HTTPException(status_code=401, detail="User not found")

    return user


# Example of protected endpoint
@app.get("/api/protected-example")
async def protected_route_example(current_user: Dict = Depends(get_current_user_from_token)):
    """
    –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞

    –¢—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    """
    return {
        "message": f"Hello {current_user['email']}!",
        "user_id": current_user['id'],
        "member_since": current_user['created_at']
    }

# ============================================
# Session Management Endpoints
# ============================================

@app.post("/api/sessions/create")
async def create_session():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —á–∞—Ç-—Å–µ—Å—Å–∏—é"""
    try:
        db = get_db()
        session_id = db.create_session()
        return {"session_id": session_id, "success": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/sessions/{session_id}/messages")
async def get_session_messages(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    try:
        db = get_db()
        messages = db.get_session_messages(session_id)
        return {"session_id": session_id, "messages": messages, "count": len(messages)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/sessions")
async def get_all_sessions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    try:
        db = get_db()
        sessions = db.get_all_sessions()
        return {"sessions": sessions, "count": len(sessions)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/api/sessions/{session_id}")
async def delete_session(session_id: str):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é"""
    try:
        db = get_db()
        db.delete_session(session_id)
        return {"success": True, "message": f"Session {session_id} deleted"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ============================================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# ============================================

if __name__ == "__main__":
    print("üöÄ Starting AI Development System API Server...")
    print("üìö API Documentation: http://localhost:8000/docs")
    print("üîç Health Check: http://localhost:8000/api/health")
    print("")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )
