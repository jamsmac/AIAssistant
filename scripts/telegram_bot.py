"""
Telegram Bot –¥–ª—è AI Development System
–ö–æ–º–∞–Ω–¥—ã: /start, /chat, /stats, /models, /create, /help
"""
import os
import sys
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv
import httpx
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent
load_dotenv(project_root / ".env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = "http://localhost:8000"

if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN not found in .env file!")
    sys.exit(1)

# ============================================
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# ============================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_message = """
ü§ñ *AI Development System Bot*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/chat <–≤–æ–ø—Ä–æ—Å> - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/models - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
/create <–∏–¥–µ—è> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
/help - –°–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á–∞—Ç–∞ —Å AI!
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

**/chat <–≤–æ–ø—Ä–æ—Å>**
–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ AI
–ü—Ä–∏–º–µ—Ä: `/chat Write Python function to sort array`

**/stats**
–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

**/models**
–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å

**/create <–∏–¥–µ—è>**
–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ –∏–¥–µ–∏
–ü—Ä–∏–º–µ—Ä: `/create Todo app with FastAPI`

*–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã - –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤ AI Chat!
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/api/stats")
            response.raise_for_status()
            data = response.json()
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*

üìû –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {data['calls']}
üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {data['tokens']:,}
üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data['cost']:.6f}
üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${data['avg_cost_per_call']:.6f}

ü§ñ *–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:* {sum(data['available_models'].values())}/5
        """
        
        if data['by_model']:
            stats_text += "\n\n*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º:*\n"
            for model, info in data['by_model'].items():
                stats_text += f"\n`{model}`\n"
                stats_text += f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {info['calls']}\n"
                stats_text += f"  ‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {info['tokens']:,}\n"
                stats_text += f"  ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${info['cost']:.6f}\n"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def models_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /models"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/api/models")
            response.raise_for_status()
            data = response.json()
        
        models_text = "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:*\n\n"
        
        for model_key, info in data.items():
            status = "‚úÖ" if info['available'] else "‚ùå"
            models_text += f"{status} *{info['name']}*\n"
            models_text += f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {info['cost']}\n"
            models_text += f"   –õ—É—á—à–µ –¥–ª—è: {', '.join(info['use_cases'][:3])}\n\n"
        
        await update.message.reply_text(models_text, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /chat"""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chat <–≤–∞—à –≤–æ–ø—Ä–æ—Å>")
        return
    
    prompt = ' '.join(context.args)
    await send_to_ai(update, prompt, task_type='code', budget='cheap')

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /create"""
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create <–∏–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞>")
        return
    
    idea = ' '.join(context.args)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ "–¥—É–º–∞–µ—Ç..."
    status_msg = await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –ø—Ä–æ–µ–∫—Ç... –≠—Ç–æ –∑–∞–π–º–µ—Ç ~30 —Å–µ–∫—É–Ω–¥...")
    
    try:
        async with httpx.AsyncClient(timeout=120.0) as client:
            response = await client.post(
                f"{API_URL}/api/project",
                json={"idea": idea, "budget": "medium"}
            )
            response.raise_for_status()
            data = response.json()
        
        result_text = f"""
‚úÖ *–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!*

üÜî Project ID: `{data['project_id']}`
üí∞ Total Cost: ${data['total_cost']:.6f}

üìê *Architecture:*
Model: {data['architecture']['model']}

üíª *Code Generated:*
Model: {data['code']['model']}

üîç *Review:*
Model: {data['review']['model']}

–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤! –°—Ç–æ–∏–º–æ—Å—Ç—å: ${data['total_cost']:.6f}
        """
        
        await status_msg.edit_text(result_text, parse_mode='Markdown')
        
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    prompt = update.message.text
    await send_to_ai(update, prompt, task_type='code', budget='cheap')

async def send_to_ai(update: Update, prompt: str, task_type: str = 'code', budget: str = 'cheap'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥—É–º–∞–µ—Ç
    status_msg = await update.message.reply_text("ü§î AI –¥—É–º–∞–µ—Ç...")
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                f"{API_URL}/api/chat",
                json={
                    "prompt": prompt,
                    "task_type": task_type,
                    "complexity": 5,
                    "budget": budget
                }
            )
            response.raise_for_status()
            data = response.json()
        
        if data.get('error'):
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {data['response']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = data['response']
        footer = f"\n\n_Model: {data['model']} | Cost: ${data['cost']:.6f} | Tokens: {data['tokens']}_"
        
        # Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
        max_length = 4000
        if len(result) > max_length:
            result = result[:max_length] + "...\n\n[–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram]"
        
        await status_msg.edit_text(result + footer, parse_mode='Markdown')
        
    except httpx.HTTPError as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)}")
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ============================================
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ============================================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ Starting Telegram Bot...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("models", models_command))
    application.add_handler(CommandHandler("chat", chat_command))
    application.add_handler(CommandHandler("create", create_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ Bot is running...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()