#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ AI –º–æ–¥–µ–ª–µ–π
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron/systemd timer)
"""

import sys
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ agents
sys.path.append(str(Path(__file__).parent.parent / "agents"))

from ranking_collector import RankingCollector
from database import get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rankings_update.log'),
        logging.StreamHandler()
    ]
)


logger = logging.getLogger(__name__)


def send_telegram_notification(message: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram Bot)
    """
    try:
        import requests
        import os

        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')

        if not bot_token or not chat_id:
            logger.info("Telegram credentials not found, skipping notification")
            return

        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }

        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Telegram notification sent")
        else:
            logger.warning(f"‚ö†Ô∏è Telegram notification failed: {response.status_code}")

    except Exception as e:
        logger.error(f"Error sending Telegram notification: {e}")


def check_for_new_leaders(db, new_stats: dict) -> list:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –ª–∏–¥–µ—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ª–∏–¥–µ—Ä–∞—Ö
    """
    notifications = []
    categories = ['reasoning', 'coding', 'vision', 'chat', 'agents', 'translation', 'local']

    for category in categories:
        current_rankings = db.get_rankings_by_category(category, limit=1)
        if current_rankings:
            leader = current_rankings[0]
            notifications.append(
                f"üèÜ *{category.upper()}* leader: {leader['model_name']} (score: {leader['score']})"
            )

    return notifications


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.info("="*60)
    logger.info("üöÄ Starting AI Models Rankings Update")
    logger.info(f"‚è∞ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("="*60)

    try:
        collector = RankingCollector()
        db = get_db()

        logger.info("\nüìä Collecting rankings from sources...")
        stats = collector.collect_all_rankings()

        total = sum(stats.values())
        logger.info(f"\n‚úÖ Collection complete:")
        logger.info(f"   Total models updated: {total}")
        for category, count in stats.items():
            logger.info(f"   - {category}: {count} models")

        logger.info("\nüîç Checking for new leaders...")
        leaders = check_for_new_leaders(db, stats)

        notification_message = f"""
ü§ñ *AI Models Rankings Updated*

‚úÖ Updated: {total} models across {len(stats)} categories

üìä *Current Leaders:*
{chr(10).join(leaders)}

‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

        logger.info("\nüì± Sending notification...")
        send_telegram_notification(notification_message)

        logger.info("\n" + "="*60)
        logger.info("‚úÖ Update completed successfully!")
        logger.info("="*60 + "\n")
        return 0

    except Exception as e:
        error_msg = f"‚ùå Error during update: {e}"
        logger.error(error_msg)
        send_telegram_notification(f"‚ö†Ô∏è Rankings update failed:\n{str(e)}")
        return 1


if __name__ == "__main__":
    sys.exit(main())










